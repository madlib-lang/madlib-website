import type { Maybe } from "Maybe"
import type { JsonValue } from "JsonValue"
import Json from "JsonPrinter"
import { Just, Nothing } from "Maybe"


export alias Playground = {
  id :: Maybe String,
  code :: String,
  stdout :: Maybe String,
  stderr :: Maybe String,
}


getOptionalPropAs :: (Playground -> Maybe String) -> String -> Playground -> List #[String, JsonValue] -> List #[String, JsonValue]
getOptionalPropAs = (accessor, fieldName, playground, values) => where(accessor(playground)) {
  Just(value) =>
    [#[fieldName, Json.string(value)], ...values]

  Nothing =>
   values
}


playgroundToJsonString :: Playground -> String
export playgroundToJsonString = (playground) => pipe(
  .code,
  (codeValue) => [#["code", Json.string(codeValue)]],
  getOptionalPropAs(.id, "id", playground),
  Json.object,
  Json.printJson(80)
)(playground)
