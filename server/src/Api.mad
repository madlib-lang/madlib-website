import type { IncomingRequest } from "MadServer"
import type { Response } from "Http"
import type { Wish } from "Wish"
import type { Maybe } from "Maybe"

import Json from "JsonParser"
import { bad } from "Wish"
import { Left, Right } from "Either"
import { Just, Nothing } from "Maybe"


alias Playground = {
  id :: Maybe String,
  code :: String,
}


playgroundParser :: Json.Parser Playground
playgroundParser = do {
  id <- Json.maybe(Json.field("id", Json.string))
  code <- Json.field("code", Json.string)

  return of({ id, code })
}


makeError :: String -> Wish (Response String) a
makeError = (message) => bad({
  status: 400,
  headers: [],
  body: `{ "error": "${message}" }`
})


readBody :: IncomingRequest -> Wish (Response String) String
readBody = (req) => pipe(
  .body,
  where {
    Just(body) =>
      of(body)

    Nothing =>
      makeError("body is empty")
  }
)(req)


parsePlayground :: String -> Wish (Response String) Playground
parsePlayground = (jsonString) => pipe(
  Json.parse(playgroundParser),
  where {
    Right(parsed) =>
      of(parsed)

    Left(parseError) =>
      makeError(parseError)
  }
)(jsonString)


postPlaygroundHandler :: IncomingRequest -> Wish (Response String) (Response String)
export postPlaygroundHandler = (req) => pipe(
  readBody,
  chain(parsePlayground),
  () => of({ status: 201, headers: [], body: "" })
)(req)
