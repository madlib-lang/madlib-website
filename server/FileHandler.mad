import type { IOError } from "IOError"
import type { IncomingRequest } from "MadServer"
import type { Header, Response } from "Http"
import type { Wish } from "Wish"

import IO from "IO"
import { mapRej } from "Wish"
import { Just } from "Maybe"
import { mapRej } from "Wish"
import { Header } from "Http"
import File from "File"
import Process from "Process"
import String from "String"
import List from "List"


buildHeaders :: IncomingRequest -> List Header
buildHeaders = (req) => pipe(
  .url,
  String.split("."),
  List.last,
  where {
    Just("svg") =>
      [Header("Content-Type", "image/svg+xml")]

    _ =>
      []
  }
)(req)

buildPath :: String -> String -> String
buildPath = (cwd, url) => `${cwd}/build/public${url}`

loadFile :: IncomingRequest -> Wish IOError String
loadFile = (req) => pipe(
  map(buildPath($, req.url)),
  chain(File.read)
)(Process.getCurrentPath)


generatePage :: IncomingRequest -> String -> Response String
generatePage = (req, body) => ({
  status: 200,
  body: body,
  headers: buildHeaders(req)
})

fileHandler :: IncomingRequest -> Wish (Response String) (Response String)
export fileHandler = (req) => pipe(
  IO.trace("REQ"),
  loadFile,
  map(generatePage(req)),
  mapRej(() => ({ status: 404, body: `{ "error": "file not found" }`, headers: [] }))
)(req)

