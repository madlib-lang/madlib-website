import String from "String"
import List from "List"
import { Just, Nothing } from "Maybe"
import { Header } from "Http"
import Process from "Process"

import Server from "MadServer"

import { fileHandler } from "@server/FileHandler"
import { postPlaygroundHandler } from "@server/Api"


BASE_API_PATH :: String
BASE_API_PATH = "/api"

DEFAULT_PORT :: Integer
DEFAULT_PORT = 3000


makeApiPath :: String -> String
makeApiPath = (path) => mconcat(BASE_API_PATH, path)


port :: Integer
port = pipe(
  List.nth(1),
  chain(scan),
  where {
    Just(p) =>
      p

    Nothing =>
      DEFAULT_PORT
  }
)(Process.Argv)


withSSLOptions :: Server.Options
withSSLOptions = pipe(
  map(Process.getEnv),
  where {
    [Just(certificateFile), Just(keyFile), caFile] =>
      {
        ...Server.DEFAULT_OPTIONS,
        ssl: Just({
          certificateFile,
          keyFile,
          caFile,
          passphrase: Nothing
        })
      }

    _ =>
      Server.DEFAULT_OPTIONS
  }
)(["SSL_CERT", "SSL_KEY", "SSL_CA"])


main :: List String -> {}
main = () => {
  pipe(
    Server.create,
    Server.post(makeApiPath("/playgrounds"), postPlaygroundHandler),
    Server.get("/*", fileHandler),
    Server.run(port)
  )({  ...withSSLOptions, verbose: true, })


  // TODO: make configurable
  if (withSSLOptions.ssl != Nothing) {
    do {
      pipe(
        Server.create,
        Server.any("/*", (req) => of({
          body: "",
          status: 301,
          headers: [Header("Location", `https://www.madlib.space${req.url}`)],
        })),
        Server.run(80)
      )({ ssl: Nothing, verbose: true, })
    }
  } else { {} }
}
