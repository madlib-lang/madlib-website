import type { Header, Response } from "Http"
import type { Wish } from "Wish"

import type { IncomingRequest } from "MadServer"

import ByteArray from "ByteArray"
import File from "File"
import { always, notEquals } from "Function"
import { Header } from "Http"
import List from "List"
import { Just } from "Maybe"
import Process from "Process"
import String from "String"
import { mapRej } from "Wish"
import { bichain, mapRej } from "Wish"



buildHeaders :: IncomingRequest -> List Header
buildHeaders = (req) => pipe(
  .url,
  String.split("."),
  List.last,
  where {
    Just("svg") =>
      [Header("Content-Type", "image/svg+xml")]

    _ =>
      []
  },
)(req)


fileHandler :: IncomingRequest -> Wish (Response ByteArray) (Response ByteArray)
export fileHandler = (req) => {
  cwd = Process.getCurrentWorkingDirectory()
  indexDotHtml = `${cwd}/build/public/index.html`

  return pipe(
    (r) => r.url == "/" ? indexDotHtml : `${cwd}/build/public${req.url}`,
    String.takeWhile(notEquals('?')),
    (path) => map(always(path), File.exists(path)),
    bichain(always(File.read(indexDotHtml)), File.read),
    map(
      (content) => (
        { status: 200, body: ByteArray.fromString(content), headers: buildHeaders(req) }
      ),
    ),
    mapRej(
      () => (
        { status: 404, body: ByteArray.fromString(`{ "error": "file not found" }`), headers: [] }
      ),
    ),
  )(req)
}
