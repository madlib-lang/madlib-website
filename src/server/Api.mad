import type { Response } from "Http"
import type { Wish } from "Wish"

import type { IncomingRequest } from "MadServer"

import type { Playground } from "@common/Playground"

import { Left, Right } from "Either"
import File from "File"
import { always } from "Function"
import { Header } from "Http"
import List from "List"
import Math from "Math"
import { Just, Nothing, fromMaybe } from "Maybe"
import Number from "Number"
import Process from "Process"
import String from "String"
import { bad, bichain, chainRej } from "Wish"

import Playground from "@common/Playground"
import { toHexadecimal } from "@server/Utils"



CORS_HEADERS = [
  Header("Access-Control-Allow-Origin", "*"),
  Header("Access-Control-Allow-Methods", "POST, PUT, GET"),
  Header("Access-Control-Allow-Headers", "*"),
  Header("Access-Control-Max-Age", "86400"),
]


parsePlayground :: String -> Wish (Response String) Playground
parsePlayground = (jsonString) => pipe(
  Playground.parse,
  where {
    Right(parsed) =>
      of(parsed)

    Left(parseError) =>
      makeError(400, parseError)
  }
)(jsonString)


makeError :: Integer -> String -> Wish (Response String) a
makeError = (status, message) => bad({
  status,
  headers: [Header("Content-Type", "application/json"), ...CORS_HEADERS,],
  body: `{ "error": "${message}" }`,
})


readBody :: IncomingRequest -> Wish (Response String) String
readBody = (req) => pipe(
  .body,
  where {
    Just(body) =>
      of(body)

    Nothing =>
      makeError(400, "body is empty")
  }
)(req)


generatePlaygroundId :: a -> String
generatePlaygroundId = () => pipe(
  List.repeatWith(Math.random),
  map(
    pipe(
      Math.multiply(15),
      Number.floatToByte,
      toHexadecimal
    )
  ),
  String.fromList
)(16)


createDirectory :: String -> a -> Wish (Response String) a
createDirectory = (playgroundId, passThrough) => pipe(
  (cwd) => Process.exec(
    "mkdir",
    ["-p", `${cwd}/build/playgrounds/${playgroundId}`,],
    Process.DEFAULT_COMMAND_OPTIONS
  ),
  chainRej(always(makeError(500, "Playground failed to be created"))),
  map(always(passThrough))
)(Process.getCurrentWorkingDirectory())


saveCode :: Playground -> Wish (Response String) Playground
saveCode = (playground) => where(playground.id) {
  Just(playgroundId) =>
    pipe(
      (cwd) => `${cwd}/build/playgrounds/${playgroundId}/Playground.mad`,
      File.write($, playground.code),
      map(always(playground)),
      chainRej(always(makeError(500, "Playground failed to be created")))
    )(Process.getCurrentWorkingDirectory())

  Nothing =>
    makeError(500, "Playground failed to be created")
}


compileCode :: Playground -> Wish (Response String) Playground
compileCode = (playground) => chain(
  pipe(
    (playgroundPath) => Process.exec(
      "madlib",
      [
        "compile",
        "--target",
        "node",
        "-i",
        `${playgroundPath}/Playground.mad`,
        "-o",
        `${playgroundPath}/build/`,
      ],
      Process.DEFAULT_COMMAND_OPTIONS
    ),
    map(always(playground)),
    chainRej(
      pipe(
        (result) => ({ ...playground, output: Just(result), }),
        Playground.toJsonString,
        (body) => bad({ body, status: 201, headers: CORS_HEADERS, })
      )
    )
  )
)(getPlaygroundPath(playground))


getPlaygroundPath :: Playground -> Wish (Response String) String
getPlaygroundPath = (playground) => where(playground.id) {
  Just(id) =>
    of(`${Process.getCurrentWorkingDirectory()}/build/playgrounds/${id}`)

  Nothing =>
    makeError(400, "Playground path could not be resolved")
}


runPlayground :: Playground -> Wish (Response String) Playground
runPlayground = (playground) => pipe(
  getPlaygroundPath,
  map(
    (playgroundPath) => [
      `${playgroundPath}/build/build/playgrounds/${fromMaybe("", playground.id)}/Playground.mjs`,
    ]
  ),
  chain(
    pipe(
      Process.exec("node", $, Process.DEFAULT_COMMAND_OPTIONS),
      bichain(
        (result) => makeError(400, result.stderr),
        (result) => of({ ...playground, output: Just(result), })
      )
    )
  )
)(playground)


postPlaygroundHandler :: IncomingRequest -> Wish (Response String) (Response String)
export postPlaygroundHandler = (req) => {
  playgroundId :: String
  playgroundId = generatePlaygroundId()

  return pipe(
    readBody,
    chain(parsePlayground),
    map(Playground.setId(playgroundId)),
    chain(createDirectory(playgroundId)),
    chain(saveCode),
    chain(compileCode),
    chain(runPlayground),
    chain(
      (output) => (
        of({
          status: 201,
          headers: [Header("Content-Type", "application/json"), ...CORS_HEADERS,],
          body: Playground.toJsonString(output),
        })
      )
    )
  )(req)
}
