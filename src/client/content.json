{
  "docs": [
    {
      "content": "# Introduction\n",
      "depth": 0,
      "slug": "introduction",
      "title": "Introduction"
    },
    {
      "content": "# Introduction to Madlib\n\n*Madlib* is a functional language which is a combination of [JavaScript](https://www.javascript.com) and [Haskell](https://www.haskell.org/). It is similar in nature to [PureScript](https://www.purescript.org/), [ReasonML](https://reasonml.github.io) and [Elm](https://elm-lang.org/).\n\nIt compiles to both Javascript and native binary executables. It is primarily designed for the web and can be used for client and server applications as well as scripting.\n\nIts main goal is to enable users to write reliable code that can be easily tested and robust in a playful way. The playfulness and succint syntax is achieved via tacit ( aka pointfree ) notation and the `pipe` utility to compose functions. Here is a small example that displays some user files after reading them from disk, all in parallel:\n\n```madlib\nimport type { Wish } from \"Wish\"\n\nimport Wish from \"Wish\"\nimport List from \"List\"\nimport File from \"File\"\nimport IO from \"IO\"\n\ntype User = User(String)\n\ngetInfoFilePath :: User -> String\ngetInfoFilePath = (user) => where(user) {\n  User(path) =>\n    path\n}\n\nreadUserInfos :: List User -> Wish {} (List String)\nreadUserInfos = (users) => pipe(\n  map(pipe(getInfoFilePath, File.read)),\n  Wish.parallel,\n  Wish.mapRej(() => ({}))\n)(users)\n\nWish.fulfill(\n  () => IO.errLine(\"Info files could not be read\"),\n  IO.log,\n  readUserInfos([User(\"./users/1.csv\"), User(\"./users/2.csv\")])\n)\n```\n",
      "depth": 0,
      "slug": "getting-started",
      "title": "Getting started"
    },
    {
      "content": "# Via npm\n",
      "depth": 1,
      "slug": "installation",
      "title": "Installation"
    },
    {
      "content": "# Hello world!",
      "depth": 1,
      "slug": "hello-world",
      "title": "Hello world"
    },
    {
      "content": "",
      "depth": 0,
      "slug": "language-features",
      "title": "Language features"
    },
    {
      "content": "## Literals\n\n### Integer\nInteger literals are whole numbers, possibly prefixed with `-`.\n\n#### Example\n```madlib\n1\n-1732\n```\n\n### Byte\nInteger literals are whole numbers between 0 and 255. \n\n#### Example\n```madlib\n(1 :: Byte)\n(255 :: Byte)\n(0 :: Byte)\n```\nNote that if used in a context where the type is not forced to be a byte it might resolve to an integer due to how the Number instance default resolution works.\n\n### Float\nFloat literals are numbers with a decimal part, possibly prefixed with `-`.\n\n#### Example\n```madlib\n1.0\n-1732.05\n```\n\n### String\nStrings are characters within double quotes, or backslashes for string templates.\n\n#### Example\n```madlib\n\"hello world\"\n`https://domain.tld/users/${userId}`\n```\n\n### Character\nCharacter literals are single characters within single quotes.\n\n#### Example\n```madlib\n'a'\n'\n'\n```\n\n#### Boolean\nCan be either true or false.\n\n#### Example\n```madlib\ntrue\nfalse\n```\n\n#### Unit\nOnly has one value possible: `{}` and can be seen as the empty record.\n\n## Lambdas\nIn Madlib, a function is simply a lambda, that can be assigned, or directly passed around or used in-line.\n\n#### Example\n```madlib\n(a, b) => a * b\n```\n",
      "depth": 1,
      "slug": "expressions",
      "title": "Expressions"
    }
  ],
  "gettingStarted": {
    "intro": "*Madlib* is a functional language which is a combination of [JavaScript](https://www.javascript.com) and [Haskell](https://www.haskell.org/). It is similar in nature to [PureScript](https://www.purescript.org/), [ReasonML](https://reasonml.github.io) and [Elm](https://elm-lang.org/).\n\nIt compiles to both Javascript and native binary executables. It is primarily designed for the web and can be used for client and server applications as well as scripting.\n\nIts main goal is to enable users to write reliable code that can be easily tested and robust in a playful way. The playfulness and succint syntax is achieved via tacit ( aka pointfree ) notation and the `pipe` utility to compose functions. Here is a small example that displays some user files after reading them from disk, all in parallel:\n\n```madlib\nimport type { Wish } from \"Wish\"\n\nimport Wish from \"Wish\"\nimport List from \"List\"\nimport File from \"File\"\nimport IO from \"IO\"\n\ntype User = User(String)\n\ngetInfoFilePath :: User -> String\ngetInfoFilePath = (user) => where(user) {\n  User(path) =>\n    path\n}\n\nreadUserInfos :: List User -> Wish {} (List String)\nreadUserInfos = (users) => pipe(\n  map(pipe(getInfoFilePath, File.read)),\n  Wish.parallel,\n  Wish.mapRej(() => ({}))\n)(users)\n\nWish.fulfill(\n  () => IO.errLine(\"Info files could not be read\"),\n  IO.log,\n  readUserInfos([User(\"./users/1.csv\"), User(\"./users/2.csv\")])\n)\n```",
    "sections": []
  },
  "header": {
    "content": "![madlib logo](/assets/logo.svg)\n> A language designed to make writing code a **delight**"
  },
  "home": [
    {
      "content": "Madlib is a pragmatic functional programming language which compiles to JavaScript. It is similar in syntax to JavaScript (with a little bit of Haskell). Madlib embraces function composition, automatic currying, and monadic control structures.",
      "title": "A functional language with familiar syntax"
    },
    {
      "content": "Mutation is only possible in explicit safe places. Madlib is powered by the [Hindley-Milner type system](https://en.wikipedia.org/wiki/Hindley-Milner_type_system), which means that it has powerful type inference and doesn't need annotations in most cases. Madlib also allows for unsafe native JavaScript wrapped in \"the fence\", i.e. `#- Math.random() -#` which gives developers a potential escape hatch (but without the benefits of type inference)",
      "title": "Safety, Types and Pragmatism"
    },
    {
      "content": "\n\n * Auto-generated documentation â€” powered by the rich type system\n * VSCode language server - provides in-IDE feedback including real-time errors and type annotations for a faster development loop",
      "title": "Tooling"
    },
    {
      "content": "\n\n * UI View Library: build web apps in the browser\n * Server: simple servers inspired by `express`\n * [Parser library](https://madlib-lang.github.io/madparser): parse structured input with native Madlib\n * Markdown parser: parse markdown input with native Madlib",
      "title": "Libraries and Examples"
    }
  ],
  "nav": [
    {"changefreq": "weekly", "href": "/", "priority": 1, "text": "Home"},
    {
      "changefreq": "weekly",
      "href": "/getting-started",
      "priority": 0.69999999999999995559,
      "text": "Getting started"
    },
    {
      "changefreq": "weekly",
      "href": "/examples",
      "priority": 0.69999999999999995559,
      "text": "Examples"
    },
    {
      "changefreq": "weekly",
      "href": "/projects",
      "priority": 0.69999999999999995559,
      "text": "Projects"
    },
    {
      "changefreq": "weekly",
      "href": "/docs",
      "priority": 0.69999999999999995559,
      "text": "Docs"
    }
  ],
  "title": "Madlib"
}