import type { Parser } from "JsonParser"
import type { Maybe } from "Maybe"

import type {
  Content,
  DocumentationPage,
  DocumentationPageWithLinks,
  Header,
  Link,
  Section,
} from "@client/State"

import { field, integer, list, map1, map2, map3, map4, map6, string } from "JsonParser"
import { Just, Nothing } from "Maybe"

import { documentationPageSlugToLink } from "@client/Utils"



sectionParser :: Parser Section
export sectionParser = map2(
  (title, content) => ({ title, content }),
  field("title", string),
  field("content", string),
)

headerParser :: Parser Header
export headerParser = map1((content) => ({ content }), field("content", string))

navParser :: Parser Link
export navParser = map4(
  (href, text, shortText, icon) => ({ text, href, shortText, icon }),
  field("href", string),
  field("text", string),
  field("shortText", string),
  field("icon", string)
)

gettingStartedParser = map2(
  (intro, sections) => ({ intro, sections }),
  field("intro", string),
  field("sections", list(sectionParser)),
)


docsParser :: Parser DocumentationPage
docsParser = map4(
  (slug, title, content, depth) => ({ slug, title, content, depth }),
  field("slug", string),
  field("title", string),
  field("content", string),
  field("depth", integer),
)

generatePageLink = (page) => ({ href: documentationPageSlugToLink(page.slug), text: page.title })


withSurroundingPagesLinks :: List DocumentationPage -> List DocumentationPageWithLinks
withSurroundingPagesLinks = (pages) => {
  go :: Maybe { href :: String, text :: String }
  -> List DocumentationPage
  -> List DocumentationPageWithLinks
  go = (previousLink, _pages) => where(_pages) {
    [page, after, ...next] =>
      [
        { ...page, previousLink, nextLink: Just(generatePageLink(after)) },
        ...go(Just(generatePageLink(page)), [after, ...next]),
      ]

    [page] =>
      [{ ...page, previousLink, nextLink: Nothing }]

    _ =>
      []
  }

  return go(Nothing, pages)
}

contentParser :: Parser Content
export contentParser = map6(
  (title, headerContent, nav, home, gettingStarted, docs) => (
    {
      title,
      header: headerContent,
      home,
      nav,
      gettingStarted,
      docs: withSurroundingPagesLinks(docs),
    }
  ),
  field("title", string),
  field("header", headerParser),
  field("nav", list(navParser)),
  field("home", list(sectionParser)),
  field("gettingStarted", gettingStartedParser),
  field("docs", list(docsParser)),
)
