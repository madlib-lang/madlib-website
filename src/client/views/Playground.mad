import type { Element, Action } from "MadUI"
import type { State } from "@client/State"

import { Just, Nothing } from "Maybe"
import { Left, Right } from "Either"
import { mapRej } from "Wish"
import { multiply } from "Math"
import { identity, complement, when } from "Function"
import String from "String"
import List from "List"
import Http from "Http"
import Dictionary from "Dictionary"

import { strata } from "Strata"
import {
  pre,
  code,
  button,
  div,
  className,
  innerHTML,
  value,
  textarea,
  span,
  spellcheck,
  onClick,
  onInput,
  onScroll,
  InputEvent,
  style,
  text
} from "MadUI"

import { parse, toJsonString } from "@common/Playground"
import ServerInfo from "@client/ServerInfo"


LINE_HEIGHT :: Integer
LINE_HEIGHT = 20

stratum = strata("playground")

// syncScroll :: Action State
syncScroll = (state, event) => pipe(
  (x) => {
    IO.trace("what kinda event you got?", x)
    IO.trace("what kinda state?", state)
    return x
  },
  of
)(event)

handleInput :: Action State
handleInput = (state, event) => pipe(
  where {
    InputEvent({ target: { value: v } }) =>
      v

    _ =>
      state.playground.code
  },
  (c) => of(() => ({
    ...state,
    playground: { ...state.playground, code: c },
  })),
  of
)(event)


handleRun :: Action State
handleRun = (state, _) => pipe(
  .playground,
  toJsonString,
  Http.post(ServerInfo.endpoint("/api/playgrounds")),
  map(
    pipe(
      .body,
      parse,
      where {
        Right(playground) =>
          (newState) => ({
            ...newState,
            playground: {
              ...newState.playground,
              output: playground.output,
            },
          })

        Left(_) =>
          identity
      }
    )
  ),
  mapRej((_, newState) => newState),
  of
)(state)


highlight :: List String -> String -> String -> String
highlight = (keywords, modifier, input) => pipe(
  String.join("|"),
  (asStr) => `(${asStr})`,
  String.replace($, `<span class="${stratum.em("syntax", [modifier])}">$1</span>`, input)
)(keywords)

renderLine :: String -> Element State
renderLine = (raw) => <div className={stratum.e("line")} innerHTML={raw} />

SYNTAX_LITERALS = ["true", "false", "[0-9]+(\\.[0-9]+)?", "\".*\""]
SYNTAX_KEYWORDS = [
  "if",
  "else",
  "where",
  "instance",
  "interface",
  "import",
  "export",
  "from",
  "type",
  "alias",
  "do",
  "pipe",
  "map",
  "chain",
  "return"
]
// highlight(["[A-Z]+[a-zA-Z0-9]*"], "special"),

SYNTAX_SPECIAL = ["$"]
SYNTAX_OPERATORS = ["\+\+", "-", "/", "*"]

// this is close but not quite
// \b(?:[^"'])(IO|String|Either)(?:[^"'])\b

SYNTAX_TYPES = [
  "JsonValue",
  "AssertionError",
  "Either",
  "Parser",
  "Maybe",
  "IOError",
  "Location",
  "Parser",
  "Error",
  "Doc",
  "SimpleDoc",
  "Wish",
  "TransferEncoding",
  "Header",
  "Method",
  "ClientError",
  "Error",
  "DateTime",
  "LocalDateTime",
  "TimeUnit"
]
SYNTAX_CONSTRUCTORS = [
  "JsonString",
  "JsonInteger",
  "JsonFloat",
  "JsonBoolean",
  "JsonNull",
  "JsonObject",
  "JsonArray",
  "AssertionError",
  "Error",
  "ErrorWithMessage",
  "NotImplemented",
  "Left",
  "Right",
  "Parser",
  "Just",
  "Nothing",
  "ArgumentListToLong",
  "PermissionDenied",
  "AddressAlreadyInUse",
  "UnknownError",
  "Loc",
  "Parser",
  "Error",
  "EmptyDoc",
  "CharDoc",
  "TextDoc",
  "LineDoc",
  "CatDoc",
  "NestDoc",
  "UnionDoc",
  "ColumnDoc",
  "NestingDoc",
  "SEmpty",
  "SChar",
  "SText",
  "SLine",
  "Wish",
  "Chunked",
  "Compress",
  "Deflate",
  "Gzip",
  "Header",
  "CONNECT",
  "DELETE",
  "GET",
  "HEAD",
  "OPTIONS",
  "PATCH",
  "POST",
  "PUT",
  "TRACE",
  "AccessDenied",
  "AddressNotFound",
  "BadTransferEncoding",
  "BadUrl",
  "ConnectionFailed",
  "Http2FramingError",
  "IncompleteResponse",
  "InternalError",
  "InvalidSSLCertificate",
  "MalformedResponse",
  "NotSupported",
  "SSLConnectionFailed",
  "SSLEngineNotFound",
  "SSLInitializationFailed",
  "Timeout",
  "TooManyRedirects",
  "UnresolvedProxy",
  "UnsupportedProtocol",
  "BadResponse",
  "ClientError",
  "DateTime",
  "LocalDateTime",
  "Millisecond",
  "Second",
  "Minute",
  "Hour",
  "Day",
  "Month",
  "Year"
]

buildCodeElements :: String -> List (Element State)
buildCodeElements = pipe(
  highlight(SYNTAX_LITERALS, "literal"),
  highlight(SYNTAX_KEYWORDS, "keyword"),
  highlight(SYNTAX_CONSTRUCTORS, "constructor"),
  highlight(SYNTAX_TYPES, "type"),
  String.split("\n"),
  map(renderLine)
  // map(when(complement(String.isEmpty), renderLine))
)


deriveHeight :: State -> String
deriveHeight = (state) => pipe(
  .playground,
  .code,
  String.split("\n"),
  List.length,
  multiply(LINE_HEIGHT),
  inspect,
  mconcat($, "px")
)(state)


displayPlaygroundOutput :: State -> Element State
displayPlaygroundOutput = (state) => where(state.playground.output) {
  Just({ stdout }) =>
    text(stdout)

  Nothing =>
    text("")
}


Playground :: State -> Element State
export Playground = (state) => {
  output = displayPlaygroundOutput(state) 
  return <div className={stratum.e("")}>
    <div className={stratum.e("container")}>
      <div className={stratum.e("editor")}>
        <div className={stratum.e("content")} style={{{ "height": deriveHeight(state) }}}>
          <button
            className={stratum.em("run-button", ["waiting"])}
            onClick={handleRun}
          >
            Run
            <div className={
              stratum.e("run-indicator")
            }/>
          </button>
          <textarea
            spellcheck={false}
            value={state.playground.code}
            className={stratum.e("input")}
            onInput={handleInput}
            // onScroll={syncScroll}
          />
          <pre className={stratum.e("highlight")}>
            <code className={stratum.e("code")}>
              {...buildCodeElements(state.playground.code)}
            </code>
          </pre>
        </div>
      </div>
      <div className={
        stratum.em(
          "output",
          [String.isEmpty(output) ? "empty" : "compiled"]
        )
      }>{output}</div>
    </div>
  </div>
}
