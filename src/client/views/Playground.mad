import type { Action, Element } from "MadUI"

import type { State } from "@client/State"

import Dictionary from "Dictionary"
import List from "List"
import { multiply } from "Math"
import { Just, Nothing } from "Maybe"
import String from "String"

import {
  button,
  className,
  code,
  div,
  onClick,
  onInput,
  onMouseDown,
  pre,
  spellcheck,
  style,
  text,
  textarea,
} from "MadUI"
import { strata } from "Strata"

import { handleInput } from "@client/actions/PlaygroundInput"
import { handleRun } from "@client/actions/PlaygroundRun"
import { HighlightedCode } from "@client/views/HighlightedCode"



LINE_HEIGHT :: Integer
LINE_HEIGHT = 24



stratum = strata("playground")



deriveHeight :: State -> String
deriveHeight = (state) => pipe(
  .playground,
  .data,
  .code,
  String.split("\n"),
  List.length,
  multiply(LINE_HEIGHT),
  inspect,
  mconcat($, "px"),
)(state)


displayPlaygroundOutput :: State -> Element State
displayPlaygroundOutput = (state) => where(state.playground.data.output) {
  Just({ stdout }) =>
    text(stdout)

  Nothing =>
    text("")
}


renderLines :: String -> List (Element State)
renderLines = (playgroundCode) => pipe(
  String.split("\n"),
  List.mapWithIndex((_, i) => inspect(i + 1)),
  map((line) => <div>{line}</div>),
)(playgroundCode)


handleDragStart :: Action State
handleDragStart = (_, _) => [
  of(
    (state) => (
      {
        ...state,
        playground: {
          ...state.playground,
          dragData: { ...state.playground.dragData, dragging: true },
        },
      }
    ),
  ),
]






Playground :: State -> Element State
export Playground = (state) => {
  output = displayPlaygroundOutput(state)
  verticalSplitPosition = `${inspect(state.playground.dragData.verticalSplitPosition)}px`

  return <div className={stratum.e("")}>
    <div className={stratum.e("container")}>
      <div className={stratum.e("lines")}>
        {...renderLines(state.playground.data.code)}
      </div>
      <div className={stratum.e("editor")}>
        <div className={stratum.e("content")} style={{{ "height": deriveHeight(state) }}}>
          <textarea spellcheck={false} className={stratum.e("input")} onInput={handleInput}>
            {state.playground.data.code}
          </textarea>
          <pre className={stratum.e("highlight")}>
            {HighlightedCode(state.playground.data.code)}
          </pre>
        </div>
      </div>
      <div
        style={{{ "width": `calc(100% - ${verticalSplitPosition})` }}}
        className={stratum.em("output", [String.isEmpty(output) ? "empty" : "compiled"])}
      >
        <div onMouseDown={handleDragStart} className={stratum.e("drag-handle")}>
          {`←→`}
        </div>
        <button className={stratum.em("run-button", ["waiting"])} onClick={handleRun}>
          Run
          <div className={stratum.e("run-indicator")} />
        </button>
        <div className={stratum.e("output-wrapper")}>
          <pre className={stratum.e("output-feed")}>
            <code className={stratum.e("output-code")}>
              {output}
            </code>
          </pre>
        </div>
      </div>
    </div>
  </div>
}
