import type { Action, Element } from "MadUI"

import type { State } from "@client/State"

import Dictionary from "Dictionary"
import { Left, Right } from "Either"
import { identity } from "Function"
import Http from "Http"
import List from "List"
import { multiply } from "Math"
import { Just, Nothing } from "Maybe"
import String from "String"
import { mapRej } from "Wish"

import {
  InputEvent,
  button,
  className,
  code,
  div,
  onClick,
  onInput,
  pre,
  spellcheck,
  style,
  text,
  textarea,
} from "MadUI"
import { strata } from "Strata"

import ServerInfo from "@client/ServerInfo"
import { HighlightedCode } from "@client/views/HighlightedCode"
import { parse, toJsonString } from "@common/Playground"



LINE_HEIGHT :: Integer
LINE_HEIGHT = 25

stratum = strata("playground")


handleInput :: Action State
handleInput = (state, event) => pipe(
  where {
    InputEvent({ target: { value: v } }) =>
      v

    _ =>
      state.playground.code
  },
  (c) => of(() => ({ ...state, playground: { ...state.playground, code: c } })),
  of,
)(event)


handleRun :: Action State
handleRun = (state, _) => pipe(
  .playground,
  toJsonString,
  Http.post(ServerInfo.endpoint("/api/playgrounds")),
  map(
    pipe(
      .body,
      parse,
      where {
        Right(playground) =>
          (newState) => (
            { ...newState, playground: { ...newState.playground, output: playground.output } }
          )

        Left(_) =>
          identity
      },
    ),
  ),
  mapRej((_, newState) => newState),
  of,
)(state)


deriveHeight :: State -> String
deriveHeight = (state) => pipe(
  .playground,
  .code,
  String.split("\n"),
  List.length,
  multiply(LINE_HEIGHT),
  inspect,
  mconcat($, "px"),
)(state)


displayPlaygroundOutput :: State -> Element State
displayPlaygroundOutput = (state) => where(state.playground.output) {
  Just({ stdout }) =>
    text(stdout)

  Nothing =>
    text("")
}


renderLines :: String -> List (Element State)
renderLines = (playgroundCode) => pipe(
  String.split("\n"),
  List.mapWithIndex((_, i) => inspect(i + 1)),
  map((line) => <div>{line}</div>),
)(playgroundCode)


Playground :: State -> Element State
export Playground = (state) => {
  output = displayPlaygroundOutput(state)
  return <div className={stratum.e("")}>
    <div className={stratum.e("container")}>
      <div className={stratum.e("lines")}>
        {...renderLines(state.playground.code)}
      </div>
      <div className={stratum.e("editor")}>
        <div className={stratum.e("content")} style={{{ "height": deriveHeight(state) }}}>
          <textarea spellcheck={false} className={stratum.e("input")} onInput={handleInput}>
            {state.playground.code}
          </textarea>
          <pre className={stratum.e("highlight")}>
            {HighlightedCode(state.playground.code)}
          </pre>
        </div>
      </div>
      <div className={stratum.em("output", [String.isEmpty(output) ? "empty" : "compiled"])}>
        <button className={stratum.em("run-button", ["waiting"])} onClick={handleRun}>
          Run
          <div className={stratum.e("run-indicator")} />
        </button>
        <pre className={stratum.e("output-feed")}>
          <code className={stratum.e("output-code")}>
            {output}
          </code>
        </pre>
      </div>
    </div>
  </div>
}
