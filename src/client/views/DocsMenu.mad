import type { Element } from "MadUI"
import type { DocsPageWithLinks, State } from "@client/State"

import IO from "IO"
import {} from "Number"
import { Nothing, fromMaybe } from "Maybe"
import { lt } from "Compare"
import { equals, ifElse } from "Function"
import { mapWithIndex, length, reject, reduce, concat, slice } from "List"

import { className, getPathName, key, li, link, style, text, to, ul } from "MadUI"
import { strata } from "Strata"

import { docLink } from "@client/Documentation"

stratum = strata("docs-menu")

makeLinkClassname :: String -> Integer -> String
makeLinkClassname = (slug, depth) => stratum.em("menu-item-link", [
  docLink(slug) == getPathName()
    ? "active"
    : "inactive",
  (#- "depth-" + depth -# :: String)
])

MenuItem :: DocsPageWithLinks -> Element State
MenuItem = (document) =>
  <li className={stratum.e("menu-item")} key={document.slug}>
    <link
      to={docLink(document.slug)}
      className={makeLinkClassname(document.slug, document.depth)}
    >
      {document.title}
    </link>
  </li>

emptyDocPage :: DocsPageWithLinks
emptyDocPage = {
  content: "_empty_",
  depth: 0,
  slug: "_EMPTY_",
  title: "Mistake",
  nextLink: Nothing,
  previousLink: Nothing
}

segmentEvery :: (a -> Boolean) -> List a -> List (List a)
segmentEvery = (pred, list) => pipe(
  mapWithIndex(
    (x, i) => pred(x) ? i : -1
  ),
  reject(equals(-1)),
  reduce(
    (agg, index) => ({
      stack: concat(
        agg.stack,
        of(
          slice(agg.index, index)(list)
        )
      ),
      index: index + 1
    }),
    {stack: [], index: 0}
  ),
  .stack,
)(list)
/*
   List (List { ...b, depth :: a })
-> List (List (Element c))
*/
renderMenuItems :: List DocsPageWithLinks -> List (Element State)
renderMenuItems = (xs) => pipe(
  segmentEvery(pipe(.depth, equals(0))),
  IO.trace("PREYO"),
  (y) => slice(1, length(y), y), 
  IO.trace("YO"),
  reduce(
    (agg, steps) => pipe(
      where {
        [] => <li />
        [x] => MenuItem(x)
        [y, ...ys] => <li>
          {MenuItem(y)}
          <ul>{...map(MenuItem, ys)}</ul>
        </li>
      },
      of,
      concat(agg),
      IO.trace("steppery"),
    )(steps),
    []
  ),
  IO.trace("STEPPED")
)(xs)

Menu :: List DocsPageWithLinks -> Element State
export Menu = (documents) =>
  <ul className={stratum.e("")}>
    {...renderMenuItems(documents)}
  </ul>
