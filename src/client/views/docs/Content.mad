import type { Maybe } from "Maybe"

import type { Config } from "MadMarkdownRenderer"
import type { Element } from "MadUI"

import type { DocumentationPageWithLinks, State } from "@client/State"

import { Just, Nothing } from "Maybe"

import { defaultConfig, renderMarkdownWithConfig, setCodeView } from "MadMarkdownRenderer"
import { className, code, div, empty, h1, link, to } from "MadUI"
import { strata } from "Strata"

import { HighlightedCode } from "@client/views/HighlightedCode"



stratum = strata("documentation-page")


MARKDOWN_RENDERER_CONFIG :: Config State
MARKDOWN_RENDERER_CONFIG = setCodeView(
  (lang, content) => lang == "madlib" ? HighlightedCode(content) : <code>{content}</code>,
  defaultConfig,
)


SurroundingPageLink :: String -> String -> Maybe { href :: String, text :: String } -> Element State
SurroundingPageLink = (extraLabel, classSuffix, maybeLink) => where(maybeLink) {
  Nothing =>
    <empty  />

  Just({ href }) =>
    <link className={stratum.e(classSuffix)} to={href}>
      {extraLabel}
    </link>
}


Content :: DocumentationPageWithLinks -> Element State
export Content = (document) =>
  <div className={stratum.e("")}>
    {SurroundingPageLink("⦉", "previous-page-link", document.previousLink)}
    // <div className={stratum.e("previous-page-link")}>
    //   {SurroundingPageLink("⦉", document.previousLink)}
    // </div>
    <div className={stratum.e("content")}>
      <h1>
        {document.title}
      </h1>
      {renderMarkdownWithConfig(MARKDOWN_RENDERER_CONFIG, document.content)}
    </div>
    {SurroundingPageLink("⦊", "next-page-link", document.nextLink)}
  </div>
