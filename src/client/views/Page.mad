import type { Maybe } from "Maybe"
import type { Element } from "MadUI"
import type { State, DocsPage } from "@client/State"

import { find } from "List"
import { equals } from "Function"
import String from "String"
import { fromMaybe } from "Maybe"
import { empty, className, div, h1, main, text } from "MadUI"
import { strata } from "Strata"

import { Nav } from "@client/views/Nav"
import { SubNav } from "@client/views/SubNav"
import { Footer } from "@client/views/Footer"
import { renderMarkdown } from "@client/Markdown"
import { Playpen } from "@client/views/Playpen"
import { slugify } from "@common/String"

stratum = strata("website")

findNamedPage :: String -> List DocsPage -> Maybe DocsPage
findNamedPage = (name, pages) => {
  return find(pipe(
    .slug,
    equals(name),
  ))(pages)
}

getPageTitle :: String -> List DocsPage -> String
getPageTitle = (name, pages) => pipe(
  findNamedPage(name),
  map(.title),
  fromMaybe("Unknown")
)(pages)


page :: String -> Element State -> State -> Element State
export page = (title, children, state) => {
  slugged = slugify(title)
  return <div className={stratum.m([slugged])}>
    {Playpen(state)} 
    {Nav(state)}
    <h1 className={stratum.e("page-title")}>
      {title}
    </h1>
    <main className={stratum.em("main", [slugged])}>
      {SubNav(state)}
      {children}
    </main>
    {Footer(state)}
  </div>
}


renderNamedPage :: String -> List DocsPage -> Element State
export renderNamedPage = (n, pages) => pipe(
  findNamedPage(n), 
  map(
    (z) => <div className={stratum.e("content")}>
      {renderMarkdown(z.content)}
    </div>
  ),
  fromMaybe(<empty />),
)(pages)

titledPageWithChildren :: String -> Element State -> Element State -> State -> Element State
export titledPageWithChildren = (name, leading, trailing, state) => {
  title = getPageTitle(name, state.content.pages)
  slugged = slugify(title)
  return page(
    title,
    <div className={stratum.em("page-content", [slugged])}>
      {leading}
      {renderNamedPage(name, state.content.pages)}
      {trailing}
    </div>,
    state
  )
}
  
titledPage :: String -> State -> Element State
export titledPage = titledPageWithChildren($, <empty />, <empty />)
