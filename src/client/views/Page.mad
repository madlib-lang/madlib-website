import type { Maybe } from "Maybe"
import type { Element } from "MadUI"
import type { State, DocsPage } from "@client/State"

import { find } from "List"
import { equals } from "Function"
import String from "String"
import { Just, Nothing, fromMaybe } from "Maybe"
import { empty, className, div, h1, main, text } from "MadUI"
import { strata } from "Strata"
import IO from "IO"

import { Nav } from "@client/views/Nav"
import { MobileNav } from "@client/views/MobileNav"
import { Footer } from "@client/views/Footer"
import { Header } from "@client/views/Header"
import { renderMarkdown } from "@client/Markdown"
import { slugify } from "@common/String"

stratum = strata("website")

findNamedPage :: String -> List DocsPage -> Maybe DocsPage
findNamedPage = (name, pages) =>
  find(pipe(
    .slug,
    equals(name),
  ))(pages)

getPageTitle :: String -> List DocsPage -> String
getPageTitle = (name, pages) => pipe(
  findNamedPage(name),
  map(.title),
  fromMaybe("Unknown")
)(pages)


page :: String -> Element State -> State -> Element State
export page = (title, children, state) =>
  <div className={stratum.m([slugify(title)])}>
    {Nav(state)}
    {MobileNav(state)}
    <h1 className={stratum.e("h1")}>
      {title}
    </h1>
    <main className={stratum.e("main")}>
      {children}
    </main>
    {Footer(state)}
  </div>


renderNamedPage :: String -> List DocsPage -> Element State
export renderNamedPage = (n, pages) => pipe(
  findNamedPage(n), 
  map(
    (z) => <div className={stratum.e("content")}>
      {renderMarkdown(z.content)}
    </div>
  ),
  fromMaybe(<empty />),
)(pages)

titledPageWithChildren :: String -> Element State -> State -> Element State
export titledPageWithChildren = (name, children, state) =>
  page(  
    getPageTitle(name, state.content.pages),
    <div>
      {renderNamedPage(name, state.content.pages)}
      {children}
    </div>,
    state
  )
  
titledPage :: String -> State -> Element State
export titledPage = titledPageWithChildren($, <empty />)
