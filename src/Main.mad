import {
  Action,
  Subscription,
  View,
  className,
  div,
  img,
  onTransitionEnd,
  renderWithSubscriptions,
  src,
  syncAction
} from "MadUI"
import { parse } from "Json"
import { Left, Right } from "Either"
import {} from "List"
import { always, equals, ifElse } from "Function"
import { get, Response } from "Http"
import { fulfill } from "Wish"
import contentJson from "./content.json"
import { TextData } from "Data"
import IO from "IO"

import { LoadingState, Transitioning, Loading, Ready, State} from './Types'
import {contentParser} from './Parsers'
import {Home} from './Home'


DEFAULT_CONTENT = {
  title: "Madlib",
  header: { content: "" },
  sections: []
}

INTIAL_STATE = { content: DEFAULT_CONTENT, loadingState: Loading }


handleTransitionEnd :: Action State
handleTransitionEnd = syncAction((s, _) => ({
  ...s,
  loadingState: Ready
}))

SplashScreen :: View LoadingState
SplashScreen = pipe(
  ifElse(
    equals(Transitioning),
    always("splash-screen__logo splash-screen__logo--transitioning"),
    always("splash-screen__logo")
  ),
  (logoClassName) => (
    <div className="splash-screen">
      <img
        className={logoClassName}
        src="/assets/logo.svg"
        onTransitionEnd={handleTransitionEnd}
      />
    </div>
  )
)

Website :: View State
Website = (state) => state.loadingState == Loading || state.loadingState == Transitioning
  ? SplashScreen(state.loadingState)
  : Home(state)

loadContentSub :: Subscription State
loadContentSub = (dispatch) => pipe(
  get,
  map(where is Response { data: TextData t }: parse(contentParser, t)),
  map(where
    is Right c: c
    is Left _ : DEFAULT_CONTENT
  ),
  fulfill(
    IO.log,
    (c) => dispatch((s) => ({ ...s, content: c, loadingState: Transitioning }))
  )
)("/content.json")

renderWithSubscriptions(Website, INTIAL_STATE, [loadContentSub], "app")
