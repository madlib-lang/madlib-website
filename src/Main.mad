import type {
  Element,
  Subscription
} from "MadUI"
import {
  renderWithSubscriptions
} from "MadUI"
import { parse } from "Json"
import { Left, Right } from "Either"
import {} from "List"
import { get, Response } from "Http"
import { fulfill } from "Wish"
import { TextData } from "Data"
import IO from "IO"

// import contentJson from "./content.json"
import type { State } from './Types'
import {
  Transitioning,
  Loading
} from './Types'
import { contentParser } from './Parsers'
import { Home } from './views/Home'
import { SplashScreen } from './views/SplashScreen'


DEFAULT_CONTENT = {
  title: "Madlib",
  header: { content: "" },
  nav: [],
  sections: []
}

INITIAL_STATE = {
  content: DEFAULT_CONTENT,
  loadingState: Loading
}

Website :: State -> Element
Website = (state) => state.loadingState == Loading || state.loadingState == Transitioning
  ? SplashScreen(state.loadingState)
  : Home(state)

loadContentSub :: Subscription State
loadContentSub = (dispatch) => pipe(
  get,
  map(where {
    Response({data: TextData(t)}) => parse(contentParser, t)
  }),
  map(where {
    Right(c) => c
    Left (_) => DEFAULT_CONTENT
  }),
  fulfill(
    IO.log,
    pipe(
      IO.trace("content"),
      (c) => dispatch((s) => ({ ...s, content: c, loadingState: Transitioning }))
    )
  )
)("/content.json")

renderWithSubscriptions(Website, INITIAL_STATE, [loadContentSub], "app")
